{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Search","state","searchValue","meals","doi","year","citation_count","references","handleOnChange","event","setState","target","value","handleSearch","makeApiCall","searchInput","fetch","then","data","json","dataSD","console","log","citation","split","reference","name","type","placeholder","onChange","this","onClick","Table","striped","bordered","hover","map","dynamicData","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kNAuEeA,G,kNAlEbC,MAAQ,CACNC,YAAa,GACbC,MAAO,GACPC,IAAI,GACJC,KAAM,GACNC,eAAgB,GAChBC,WAAY,I,EAEZC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,S,EAE1CC,aAAe,WACb,EAAKC,YAAY,EAAKb,MAAMC,c,EAE7BY,YAAc,SAAAC,GACdC,MAAM,mDAAD,OAAoDD,IAAeE,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UACvFF,MAAK,SAAAG,GAASC,QAAQC,IAAKF,EAAO,GAAGG,SAASC,MAAM,OACpD,EAAKd,SAAS,CACZP,MAAMiB,EAAO,GAAGG,SAASC,MAAM,KAC/BjB,WAAWa,EAAO,GAAGK,UAAUD,MAAM,KACrCpB,IAAKgB,EAAO,GAAGhB,IACjBC,KAAKe,EAAO,GAAGf,KACjBC,eAAec,EAAO,GAAGd,qB,uDAErB,IAAD,OACP,OACE,6BACA,+GACA,yEACA,2BACJoB,KAAK,OACLC,KAAK,OACLC,YAAY,mBACZC,SAAU,SAAApB,GAAK,OAAI,EAAKD,eAAeC,IACvCG,MAAOkB,KAAK7B,MAAMC,cAElB,4BAAQ6B,QAASD,KAAKjB,cAAtB,UACA,kBAACmB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,sCACA,oCACA,8CACA,0CACA,0CAIJ,+BAEA,4BACF,4BAAKL,KAAK7B,MAAMG,KAChB,4BAAK0B,KAAK7B,MAAMI,MAChB,4BAAKyB,KAAK7B,MAAMK,gBAChB,4BAAKwB,KAAK7B,MAAMM,WAAW6B,KAAI,SAACC,GAAgB,OAAO,4BAAKA,OAC5D,4BAAKP,KAAK7B,MAAME,MAAMiC,KAAI,SAACC,GAAgB,OAAO,4BAAKA,e,GAxDlCC,cCQDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.e6e28c69.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Table from 'react-bootstrap/Table';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Search extends Component {\n  state = {\n    searchValue: \"\",\n    meals: [],\n    doi:\"\",\n    year: \"\",\n    citation_count: \"\",\n    references: []\n    };\n    handleOnChange = event => {\n      this.setState({ searchValue: event.target.value });\n      };\n      handleSearch = () => {\n        this.makeApiCall(this.state.searchValue);\n        };  \n       makeApiCall = searchInput => {\n       fetch(`https://opencitations.net/index/api/v1/metadata/${searchInput}`).then(data=>data.json())\n       .then(dataSD=>{console.log((dataSD[0].citation.split('; '))); \n        this.setState({ \n          meals:dataSD[0].citation.split(';'),\n          references:dataSD[0].reference.split(';'),\n          doi: dataSD[0].doi,\n        year:dataSD[0].year,\n      citation_count:dataSD[0].citation_count})})\n        };\nrender() {\n  return (\n    <div>\n    <h1>Welcome to the Backward search(references) & Forward search(cited by) using DOI</h1>\n    <h5>(This website is using opencitations API)</h5>\n    <input\nname=\"text\"\ntype=\"text\"\nplaceholder=\"Search using DOI\"\nonChange={event => this.handleOnChange(event)}\nvalue={this.state.searchValue}\n/>\n<button onClick={this.handleSearch}>Search</button>\n<Table striped bordered hover>\n  <thead>\n    <tr>\n      <th>Source</th>\n      <th>Year</th>\n      <th>Citation count</th>\n      <th>References</th>\n      <th>Cited by</th>\n      \n    </tr>\n  </thead>\n  <tbody>\n        {\n (<tr>\n<td>{this.state.doi}</td>\n<td>{this.state.year}</td>\n<td>{this.state.citation_count}</td>\n<td>{this.state.references.map((dynamicData)=>{ return(<tr>{dynamicData}</tr>)})}</td>\n<td>{this.state.meals.map((dynamicData)=>{ return(<tr>{dynamicData}</tr>)})}</td>\n</tr>)\n}\n                </tbody>\n                </Table> \n              \n    </div>\n    \n    );\n}\n}\nexport default Search;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}